{"version":3,"sources":["utils/webGLUtils/webGLUtils.js","assets/shaders/BokehShader2.js","utils/squareGameUtils/squareGameUtils.ts","components/SquareGameContainer/SquareGameContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WEBGL","canvas","document","createElement","window","WebGLRenderingContext","getContext","e","WebGL2RenderingContext","this","getErrorMessage","version","contexts","1","2","message","element","id","style","fontFamily","fontSize","fontWeight","textAlign","background","color","padding","width","margin","replace","innerHTML","BokehShader","uniforms","textureWidth","value","textureHeight","focalDepth","focalLength","fstop","tColor","tDepth","maxblur","showFocus","manualdof","vignetting","depthblur","threshold","gain","bias","fringe","znear","zfar","noise","dithering","pentagon","shaderFocus","focusCoords","Vector2","vertexShader","fragmentShader","BokehDepthShader","mNear","mFar","randomNumberRange","min","max","Math","random","initPostprocessing","postprocessing","shaderSettings","scene","THREE","camera","innerWidth","innerHeight","position","z","add","rtTextureDepth","rtTextureColor","bokeh_shader","bokeh_uniforms","clone","texture","materialBokeh","defines","RINGS","rings","SAMPLES","samples","quad","randomLoseMessage","floor","randomWinMessage","SquareGameContainer","_React$useState","React","useState","_React$useState2","Object","slicedToArray","quality","setQuality","_React$useState3","_React$useState4","isMobileAspectRatio","setIsMobileAspectRatio","useEffect","isWebGLAvailable","renderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","autoClear","clear","domElement","className","body","contains","getElementById","append","dom","removeChild","set","dirLight","rotateX","hemiLight","setupSquareGameLights","isHighQuality","levelWin","levelLose","materialDepth","postProcessing","enabled","mouse","x","y","depthShader","near","far","addEventListener","aspect","updateProjectionMatrix","playerAcceleration","playerGeo","playerMat","emissive","specular","shininess","reflectivity","refractionRatio","playerMesh","geometry","computeBoundingSphere","playerBoundingSphere","event","preventDefault","touches","clientX","clientY","vector","unproject","dir","sub","normalize","distance","pos","multiplyScalar","copy","winLoseLevelDiv","bigHand","littleHand","clock","delta","time","timeText","concat","toString","timerDiv","instructionsDiv","moonMat","opacity","moonGeo","moonMesh","scale","hillMat","hillGeo","treeMat","treeMeshArray","treeGeo","i","tempTreeMesh","push","generateTrees","hill1Mesh","hill2Mesh","hill3Mesh","hill4Mesh","apply","toConsumableArray","enemyDirection","enemyGeo","computeBoundingBox","enemyMat","enemyMesh","enemyBoundingBox","Vector3","setFromObject","enemyMatTween","Tween","material","to","repeat","Infinity","yoyo","easing","Easing","Quadratic","InOut","start","render","setRenderTarget","overrideMaterial","requestAnimationFrame","animate","aniTime","boundingSphere","console","log","boundingBox","distanceToPoint","center","intersectsSphere","animationPlayState","classList","getDelta","remove","sign","rotateZ","applyMatrix4","matrixWorld","update","squareGameFunctionality","warning","getWebGLErrorMessage","appendChild","react_default","a","data-testid","onClick","App","SquareGameContainer_SquareGameContainer_SquareGameContainer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c076eea0.chunk.js","sourcesContent":["// Not my code, came from https://github.com/mrdoob/three.js/blob/master/examples/jsm/WebGL.js\r\n\r\nclass WEBGL {\r\n\r\n\tstatic isWebGLAvailable() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst canvas = document.createElement( 'canvas' );\r\n\t\t\treturn !! ( window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ) );\r\n\r\n\t\t} catch ( e ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic isWebGL2Available() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst canvas = document.createElement( 'canvas' );\r\n\t\t\treturn !! ( window.WebGL2RenderingContext && canvas.getContext( 'webgl2' ) );\r\n\r\n\t\t} catch ( e ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic getWebGLErrorMessage() {\r\n\r\n\t\treturn this.getErrorMessage( 1 );\r\n\r\n\t}\r\n\r\n\tstatic getWebGL2ErrorMessage() {\r\n\r\n\t\treturn this.getErrorMessage( 2 );\r\n\r\n\t}\r\n\r\n\tstatic getErrorMessage( version ) {\r\n\r\n\t\tconst names = {\r\n\t\t\t1: 'WebGL',\r\n\t\t\t2: 'WebGL 2'\r\n\t\t};\r\n\r\n\t\tconst contexts = {\r\n\t\t\t1: window.WebGLRenderingContext,\r\n\t\t\t2: window.WebGL2RenderingContext\r\n\t\t};\r\n\r\n\t\tlet message = 'Your $0 does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">$1</a>';\r\n\r\n\t\tconst element = document.createElement( 'div' );\r\n\t\telement.id = 'webglmessage';\r\n\t\telement.style.fontFamily = 'monospace';\r\n\t\telement.style.fontSize = '13px';\r\n\t\telement.style.fontWeight = 'normal';\r\n\t\telement.style.textAlign = 'center';\r\n\t\telement.style.background = '#fff';\r\n\t\telement.style.color = '#000';\r\n\t\telement.style.padding = '1.5em';\r\n\t\telement.style.width = '400px';\r\n\t\telement.style.margin = '5em auto 0';\r\n\r\n\t\tif ( contexts[ version ] ) {\r\n\r\n\t\t\tmessage = message.replace( '$0', 'graphics card' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmessage = message.replace( '$0', 'browser' );\r\n\r\n\t\t}\r\n\r\n\t\tmessage = message.replace( '$1', names[ version ] );\r\n\r\n\t\telement.innerHTML = message;\r\n\r\n\t\treturn element;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WEBGL };","import {\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * Depth-of-field shader with bokeh\r\n * ported from GLSL shader by Martins Upitis\r\n * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\r\n *\r\n * Requires #define RINGS and SAMPLES integers\r\n */\r\nconst BokehShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'textureWidth': { value: 1.0 },\r\n\t\t'textureHeight': { value: 1.0 },\r\n\r\n\t\t'focalDepth': { value: 2.8 },\r\n\t\t'focalLength': { value: 25.0 },\r\n\t\t'fstop': { value: 2.2 },\r\n\r\n\t\t'tColor': { value: null },\r\n\t\t'tDepth': { value: null },\r\n\r\n\t\t'maxblur': { value: 1.1 },\r\n\r\n\t\t'showFocus': { value: 0 },\r\n\t\t'manualdof': { value: 0 },\r\n\t\t'vignetting': { value: 0 },\r\n\t\t'depthblur': { value: 0 },\r\n\r\n\t\t'threshold': { value: 0.5 },\r\n\t\t'gain': { value: 2.0 },\r\n\t\t'bias': { value: 0.5 },\r\n\t\t'fringe': { value: 0.7 },\r\n\r\n\t\t'znear': { value: 0.1 },\r\n\t\t'zfar': { value: 100 },\r\n\r\n\t\t'noise': { value: 1 },\r\n\t\t'dithering': { value: 0.0001 },\r\n\t\t'pentagon': { value: 0 },\r\n\r\n\t\t'shaderFocus': { value: 1 },\r\n\t\t'focusCoords': { value: new Vector2() }\r\n\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\t#include <common>\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tuniform sampler2D tColor;\r\n\t\tuniform sampler2D tDepth;\r\n\t\tuniform float textureWidth;\r\n\t\tuniform float textureHeight;\r\n\r\n\t\tuniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\r\n\t\tuniform float focalLength; //focal length in mm\r\n\t\tuniform float fstop; //f-stop value\r\n\t\tuniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\r\n\r\n\t\t/*\r\n\t\tmake sure that these two values are the same for your camera, otherwise distances will be wrong.\r\n\t\t*/\r\n\r\n\t\tuniform float znear; // camera clipping start\r\n\t\tuniform float zfar; // camera clipping end\r\n\r\n\t\t//------------------------------------------\r\n\t\t//user variables\r\n\r\n\t\tconst int samples = SAMPLES; //samples on the first ring\r\n\t\tconst int rings = RINGS; //ring count\r\n\r\n\t\tconst int maxringsamples = rings * samples;\r\n\r\n\t\tuniform bool manualdof; // manual dof calculation\r\n\t\tfloat ndofstart = 1.0; // near dof blur start\r\n\t\tfloat ndofdist = 2.0; // near dof blur falloff distance\r\n\t\tfloat fdofstart = 1.0; // far dof blur start\r\n\t\tfloat fdofdist = 3.0; // far dof blur falloff distance\r\n\r\n\t\tfloat CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\r\n\r\n\t\tuniform bool vignetting; // use optical lens vignetting\r\n\r\n\t\tfloat vignout = 1.3; // vignetting outer border\r\n\t\tfloat vignin = 0.0; // vignetting inner border\r\n\t\tfloat vignfade = 22.0; // f-stops till vignete fades\r\n\r\n\t\tuniform bool shaderFocus;\r\n\t\t// disable if you use external focalDepth value\r\n\r\n\t\tuniform vec2 focusCoords;\r\n\t\t// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\r\n\t\t// if center of screen use vec2(0.5, 0.5);\r\n\r\n\t\tuniform float maxblur;\r\n\t\t//clamp value of max blur (0.0 = no blur, 1.0 default)\r\n\r\n\t\tuniform float threshold; // highlight threshold;\r\n\t\tuniform float gain; // highlight gain;\r\n\r\n\t\tuniform float bias; // bokeh edge bias\r\n\t\tuniform float fringe; // bokeh chromatic aberration / fringing\r\n\r\n\t\tuniform bool noise; //use noise instead of pattern for sample dithering\r\n\r\n\t\tuniform float dithering;\r\n\r\n\t\tuniform bool depthblur; // blur the depth buffer\r\n\t\tfloat dbsize = 1.25; // depth blur size\r\n\r\n\t\t/*\r\n\t\tnext part is experimental\r\n\t\tnot looking good with small sample and ring count\r\n\t\tlooks okay starting from samples = 4, rings = 4\r\n\t\t*/\r\n\r\n\t\tuniform bool pentagon; //use pentagon as bokeh shape?\r\n\t\tfloat feather = 0.4; //pentagon shape feather\r\n\r\n\t\t//------------------------------------------\r\n\r\n\t\tfloat penta(vec2 coords) {\r\n\t\t\t//pentagonal shape\r\n\t\t\tfloat scale = float(rings) - 1.3;\r\n\t\t\tvec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\r\n\t\t\tvec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\r\n\t\t\tvec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\r\n\t\t\tvec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\r\n\t\t\tvec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\r\n\t\t\tvec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\r\n\r\n\t\t\tvec4  one = vec4( 1.0 );\r\n\r\n\t\t\tvec4 P = vec4((coords),vec2(scale, scale));\r\n\r\n\t\t\tvec4 dist = vec4(0.0);\r\n\t\t\tfloat inorout = -4.0;\r\n\r\n\t\t\tdist.x = dot( P, HS0 );\r\n\t\t\tdist.y = dot( P, HS1 );\r\n\t\t\tdist.z = dot( P, HS2 );\r\n\t\t\tdist.w = dot( P, HS3 );\r\n\r\n\t\t\tdist = smoothstep( -feather, feather, dist );\r\n\r\n\t\t\tinorout += dot( dist, one );\r\n\r\n\t\t\tdist.x = dot( P, HS4 );\r\n\t\t\tdist.y = HS5.w - abs( P.z );\r\n\r\n\t\t\tdist = smoothstep( -feather, feather, dist );\r\n\t\t\tinorout += dist.x;\r\n\r\n\t\t\treturn clamp( inorout, 0.0, 1.0 );\r\n\t\t}\r\n\r\n\t\tfloat bdepth(vec2 coords) {\r\n\t\t\t// Depth buffer blur\r\n\t\t\tfloat d = 0.0;\r\n\t\t\tfloat kernel[9];\r\n\t\t\tvec2 offset[9];\r\n\r\n\t\t\tvec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\r\n\r\n\t\t\toffset[0] = vec2(-wh.x,-wh.y);\r\n\t\t\toffset[1] = vec2( 0.0, -wh.y);\r\n\t\t\toffset[2] = vec2( wh.x -wh.y);\r\n\r\n\t\t\toffset[3] = vec2(-wh.x,  0.0);\r\n\t\t\toffset[4] = vec2( 0.0,   0.0);\r\n\t\t\toffset[5] = vec2( wh.x,  0.0);\r\n\r\n\t\t\toffset[6] = vec2(-wh.x, wh.y);\r\n\t\t\toffset[7] = vec2( 0.0,  wh.y);\r\n\t\t\toffset[8] = vec2( wh.x, wh.y);\r\n\r\n\t\t\tkernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\r\n\t\t\tkernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\r\n\t\t\tkernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\r\n\r\n\r\n\t\t\tfor( int i=0; i<9; i++ ) {\r\n\t\t\t\tfloat tmp = texture2D(tDepth, coords + offset[i]).r;\r\n\t\t\t\td += tmp * kernel[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn d;\r\n\t\t}\r\n\r\n\r\n\t\tvec3 color(vec2 coords,float blur) {\r\n\t\t\t//processing the sample\r\n\r\n\t\t\tvec3 col = vec3(0.0);\r\n\t\t\tvec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\r\n\r\n\t\t\tcol.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\r\n\t\t\tcol.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\r\n\t\t\tcol.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\r\n\r\n\t\t\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\r\n\t\t\tfloat lum = dot(col.rgb, lumcoeff);\r\n\t\t\tfloat thresh = max((lum-threshold)*gain, 0.0);\r\n\t\t\treturn col+mix(vec3(0.0),col,thresh*blur);\r\n\t\t}\r\n\r\n\t\tvec3 debugFocus(vec3 col, float blur, float depth) {\r\n\t\t\tfloat edge = 0.002*depth; //distance based edge smoothing\r\n\t\t\tfloat m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\r\n\t\t\tfloat e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\r\n\r\n\t\t\tcol = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\r\n\t\t\tcol = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\r\n\r\n\t\t\treturn col;\r\n\t\t}\r\n\r\n\t\tfloat linearize(float depth) {\r\n\t\t\treturn -zfar * znear / (depth * (zfar - znear) - zfar);\r\n\t\t}\r\n\r\n\t\tfloat vignette() {\r\n\t\t\tfloat dist = distance(vUv.xy, vec2(0.5,0.5));\r\n\t\t\tdist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\r\n\t\t\treturn clamp(dist,0.0,1.0);\r\n\t\t}\r\n\r\n\t\tfloat gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\r\n\t\t\tfloat rings2 = float(rings);\r\n\t\t\tfloat step = PI*2.0 / float(ringsamples);\r\n\t\t\tfloat pw = cos(j*step)*i;\r\n\t\t\tfloat ph = sin(j*step)*i;\r\n\t\t\tfloat p = 1.0;\r\n\t\t\tif (pentagon) {\r\n\t\t\t\tp = penta(vec2(pw,ph));\r\n\t\t\t}\r\n\t\t\tcol += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\r\n\t\t\treturn 1.0 * mix(1.0, i /rings2, bias) * p;\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\t\t\t//scene depth calculation\r\n\r\n\t\t\tfloat depth = linearize(texture2D(tDepth,vUv.xy).x);\r\n\r\n\t\t\t// Blur depth?\r\n\t\t\tif ( depthblur ) {\r\n\t\t\t\tdepth = linearize(bdepth(vUv.xy));\r\n\t\t\t}\r\n\r\n\t\t\t//focal plane calculation\r\n\r\n\t\t\tfloat fDepth = focalDepth;\r\n\r\n\t\t\tif (shaderFocus) {\r\n\r\n\t\t\t\tfDepth = linearize(texture2D(tDepth,focusCoords).x);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// dof blur factor calculation\r\n\r\n\t\t\tfloat blur = 0.0;\r\n\r\n\t\t\tif (manualdof) {\r\n\t\t\t\tfloat a = depth-fDepth; // Focal plane\r\n\t\t\t\tfloat b = (a-fdofstart)/fdofdist; // Far DoF\r\n\t\t\t\tfloat c = (-a-ndofstart)/ndofdist; // Near Dof\r\n\t\t\t\tblur = (a>0.0) ? b : c;\r\n\t\t\t} else {\r\n\t\t\t\tfloat f = focalLength; // focal length in mm\r\n\t\t\t\tfloat d = fDepth*1000.0; // focal plane in mm\r\n\t\t\t\tfloat o = depth*1000.0; // depth in mm\r\n\r\n\t\t\t\tfloat a = (o*f)/(o-f);\r\n\t\t\t\tfloat b = (d*f)/(d-f);\r\n\t\t\t\tfloat c = (d-f)/(d*fstop*CoC);\r\n\r\n\t\t\t\tblur = abs(a-b)*c;\r\n\t\t\t}\r\n\r\n\t\t\tblur = clamp(blur,0.0,1.0);\r\n\r\n\t\t\t// calculation of pattern for dithering\r\n\r\n\t\t\tvec2 noise = vec2(rand(vUv.xy), rand( vUv.xy + vec2( 0.4, 0.6 ) ) )*dithering*blur;\r\n\r\n\t\t\t// getting blur x and y step factor\r\n\r\n\t\t\tfloat w = (1.0/textureWidth)*blur*maxblur+noise.x;\r\n\t\t\tfloat h = (1.0/textureHeight)*blur*maxblur+noise.y;\r\n\r\n\t\t\t// calculation of final color\r\n\r\n\t\t\tvec3 col = vec3(0.0);\r\n\r\n\t\t\tif(blur < 0.05) {\r\n\t\t\t\t//some optimization thingy\r\n\t\t\t\tcol = texture2D(tColor, vUv.xy).rgb;\r\n\t\t\t} else {\r\n\t\t\t\tcol = texture2D(tColor, vUv.xy).rgb;\r\n\t\t\t\tfloat s = 1.0;\r\n\t\t\t\tint ringsamples;\r\n\r\n\t\t\t\tfor (int i = 1; i <= rings; i++) {\r\n\t\t\t\t\t/*unboxstart*/\r\n\t\t\t\t\tringsamples = i * samples;\r\n\r\n\t\t\t\t\tfor (int j = 0 ; j < maxringsamples ; j++) {\r\n\t\t\t\t\t\tif (j >= ringsamples) break;\r\n\t\t\t\t\t\ts += gather(float(i), float(j), ringsamples, col, w, h, blur);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/*unboxend*/\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcol /= s; //divide by sample count\r\n\t\t\t}\r\n\r\n\t\t\tif (showFocus) {\r\n\t\t\t\tcol = debugFocus(col, blur, depth);\r\n\t\t\t}\r\n\r\n\t\t\tif (vignetting) {\r\n\t\t\t\tcol *= vignette();\r\n\t\t\t}\r\n\r\n\t\t\tgl_FragColor.rgb = col;\r\n\t\t\tgl_FragColor.a = 1.0;\r\n\t\t}`\r\n\r\n};\r\n\r\nconst BokehDepthShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'mNear': { value: 1.0 },\r\n\t\t'mFar': { value: 1000.0 },\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying float vViewZDepth;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#include <begin_vertex>\r\n\t\t\t#include <project_vertex>\r\n\r\n\t\t\tvViewZDepth = - mvPosition.z;\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float mNear;\r\n\t\tuniform float mFar;\r\n\r\n\t\tvarying float vViewZDepth;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\r\n\t\t\tgl_FragColor = vec4( vec3( color ), 1.0 );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { BokehShader, BokehDepthShader };","import * as THREE from 'three';\r\nimport { BokehShader, BokehDepthShader } from '../../assets/shaders/BokehShader2';\r\nimport { Tween, Easing } from '@tweenjs/tween.js';\r\nimport { innerGlowShader } from '../../assets/shaders/miscShaders';\r\nimport textFont from '../../assets/fonts/liera-sans-bold.json';\r\nimport { FontLoader } from '../loadingUtils/loadingUtils';\r\nimport { TextGeometry } from '../textRenderingUtils/textRenderingUtils';\r\nimport { Vector3 } from 'three';\r\n\r\nexport const setupSquareGameLights = ( scene: THREE.Scene ) => {\r\n    let dirLight = new THREE.DirectionalLight('rgb(255,150,80)', 1);\r\n    dirLight.position.set( 500, 300, -500 );\r\n    dirLight.rotateX(50);\r\n    scene.add( dirLight );\r\n\r\n    // Directional light helper (temp af)\r\n    const helpDirLight = new THREE.DirectionalLightHelper( dirLight );\r\n    //scene.add( helpDirLight );\r\n\r\n    let hemiLight = new THREE.HemisphereLight(0xffffff, 0x232323, 1);\r\n    scene.add( hemiLight );\r\n};\r\n\r\nexport const squareGameFunctionality = (\r\n    scene: THREE.Scene,\r\n    renderer: any,\r\n    camera: THREE.PerspectiveCamera,\r\n    quality: any,\r\n    isMobileAspectRatio: boolean ) => {\r\n\r\n      const isHighQuality = quality === 1;\r\n\r\n      let levelWin = false;\r\n      let levelLose = false;\r\n\r\n      // Bokeh DOF shader setup\r\n      let materialDepth: any = {};\r\n      let postProcessing: any = { enabled: true };\r\n      const shaderSettings = { rings: 4, samples: 2 };\r\n\r\n      let mouse = {x: 0, y: 0};\r\n\r\n      const depthShader = BokehDepthShader;\r\n\r\n      materialDepth = new THREE.ShaderMaterial( {\r\n          uniforms: depthShader.uniforms,\r\n          vertexShader: depthShader.vertexShader,\r\n          fragmentShader: depthShader.fragmentShader\r\n      } );\r\n\r\n      materialDepth.uniforms[ 'mNear' ].value = camera.near;\r\n      materialDepth.uniforms[ 'mFar' ].value = camera.far;\r\n\r\n      // Window Resizing\r\n      window.addEventListener( 'resize', onWindowResize );\r\n      function onWindowResize() {\r\n\r\n\t\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\t\tpostProcessing.rtTextureDepth.setSize( window.innerWidth, window.innerHeight );\r\n\t\t\t\tpostProcessing.rtTextureColor.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\t\t\t\tpostProcessing.bokeh_uniforms[ 'textureWidth' ].value = window.innerWidth;\r\n\t\t\t\tpostProcessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight;\r\n\r\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\t\t\t};\r\n\r\n      // Skybox\r\n      scene.background = new THREE.Color('rgb(18,54,89)');\r\n      // TODO: ADD TEXTURED SKYBOX FOR HIGH QUALITY\r\n      // const r = 'textures/cube/Bridge2/';\r\n      // const urls = [ r + 'posx.jpg', r + 'negx.jpg',\r\n      //             r + 'posy.jpg', r + 'negy.jpg',\r\n      //             r + 'posz.jpg', r + 'negz.jpg' ];\r\n      // const textureCube = new THREE.CubeTextureLoader().load( urls );\r\n\r\n      // scene.background = textureCube;\r\n\r\n      postProcessing = initPostprocessing( postProcessing, shaderSettings );\r\n\r\n      // Player sphere creation\r\n      let playerAcceleration = 0;\r\n      const playerGeo = new THREE.SphereGeometry(isMobileAspectRatio ? 4 : 6, isHighQuality ? 16 : 8, isHighQuality ? 36 : 18);\r\n      const playerMat = new THREE.MeshPhongMaterial({\r\n          color: 'rgb(23,195,230)',\r\n          emissive: 'rgb(0,0,0)',\r\n          specular: 'rgb(255,220,0)',\r\n          shininess: 30,\r\n          reflectivity: 1,\r\n          refractionRatio: 0.98\r\n      });\r\n      let playerMesh = new THREE.Mesh( playerGeo, playerMat );\r\n      playerMesh.geometry.computeBoundingSphere();\r\n      playerMesh.position.set(0,0,400);\r\n      let playerBoundingSphere = new THREE.Sphere(playerMesh.position, isMobileAspectRatio ? 4 : 6);\r\n      scene.add( playerMesh );\r\n\r\n      const onMouseMove = ( event: MouseEvent ) => {\r\n          event.preventDefault();\r\n          if(!levelLose && !levelWin) {\r\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n        \r\n            // Make the sphere follow the mouse\r\n            let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n            vector.unproject( camera );\r\n            let dir = vector.sub( camera.position ).normalize();\r\n            let distance = - (camera.position.z - 400) / dir.z;\r\n            let pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n            playerMesh.position.copy(pos);\r\n          }\r\n      };\r\n\r\n      const onTouchMove = ( event: TouchEvent ) => {\r\n        event.preventDefault();\r\n        if(!levelLose && !levelWin) {\r\n          mouse.x = (event.touches[0].clientX / window.innerWidth) * 2 - 1;\r\n          mouse.y = - (event.touches[0].clientY / window.innerHeight) * 2 + 1;\r\n      \r\n          // Make the sphere follow the mouse\r\n          let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n          vector.unproject( camera );\r\n          let dir = vector.sub( camera.position ).normalize();\r\n          let distance = - (camera.position.z - 400) / dir.z;\r\n          let pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n          playerMesh.position.copy(pos);\r\n        }\r\n    };\r\n\r\n      // When the mouse moves, call the given function\r\n      if (isMobileAspectRatio) {\r\n        document.addEventListener('touchmove', onTouchMove, false);\r\n      } else {\r\n        document.addEventListener('mousemove', onMouseMove, false);\r\n      }\r\n\r\n      // Level setup\r\n      let level = 1;\r\n      const LEVEL_1_TIME = 50;\r\n\r\n      const winLoseLevelDiv = document.getElementById('winLoseText');\r\n\r\n      // Timer UI setup\r\n      const bigHand = document.getElementById('timerBigLineAni');\r\n      const littleHand = document.getElementById('timerSmallLineAni');\r\n      let clock = new THREE.Clock();\r\n      let speed = 1;\r\n      let delta = 0;\r\n      let time = LEVEL_1_TIME;\r\n      let timeText: string = `Left: ${LEVEL_1_TIME.toString()}`;\r\n\r\n      const timerDiv = document.getElementById('timerDiv');\r\n      const instructionsDiv = document.getElementById('instructionsContainer');\r\n      \r\n      // BG Objects setup\r\n      const moonMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(175,130,85)',\r\n        emissive: 'rgb(175,130,85)',\r\n        specular: 'rgb(50,50,50)',\r\n        shininess: 0,\r\n        reflectivity: 0,\r\n        refractionRatio: 0\r\n      });\r\n      moonMat.opacity = 0.1;\r\n      const moonGeo = new THREE.SphereBufferGeometry(400, isHighQuality ? 30 : 15, isHighQuality ? 30 : 15);\r\n      const moonMesh = new THREE.Mesh( moonGeo, moonMat );\r\n      moonMesh.position.set(500, 300, 0);\r\n      moonMesh.scale.z = 0.1;\r\n      const hillMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(15,59,102)',\r\n        emissive: 'rgb(0,0,0)',\r\n        specular: 'rgb(255,230,50)',\r\n        shininess: 2,\r\n        reflectivity: 0.1,\r\n        refractionRatio: 0.1\r\n      });\r\n      const hillGeo = new THREE.SphereBufferGeometry(175, isHighQuality ? 20 : 10, isHighQuality ? 20 : 10);\r\n      const NUM_OF_TREES = 35;\r\n      const treeMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(23,69,115)',\r\n        emissive: 'rgb(0,0,0)',\r\n        specular: 'rgb(200,180,50)',\r\n        shininess: 1,\r\n        reflectivity: 0.1,\r\n        refractionRatio: 0.1\r\n      });\r\n      let treeMeshArray: THREE.Mesh[] = [];\r\n      const treeGeo = new THREE.ConeGeometry(50,150, isHighQuality ? 12 : 6, isHighQuality ? 6 : 3);\r\n      const generateTrees = (): THREE.Mesh[] => {\r\n        for(let i = 0; i < NUM_OF_TREES; i++) {\r\n          const tempTreeMesh = new THREE.Mesh( treeGeo, treeMat );\r\n          tempTreeMesh.position.set(-2000+(i*randomNumberRange(70,140)),-150+(Math.random()*30),200);\r\n          treeMeshArray.push(tempTreeMesh);\r\n        }\r\n        return treeMeshArray;\r\n      };\r\n      treeMeshArray = generateTrees();\r\n      let hill1Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill1Mesh.position.set(-300,-175,100);\r\n      hill1Mesh.scale.set(1.2,1.5,0.4);\r\n      let hill2Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill2Mesh.position.set(0,-250,100);\r\n      hill2Mesh.scale.set(1.2,1.5,0.4);\r\n      let hill3Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill3Mesh.position.set(600,-175,100);\r\n      hill3Mesh.scale.set(1.2,1.5,0.4);\r\n      let hill4Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill4Mesh.position.set(900,-250,100);\r\n      hill4Mesh.scale.set(1.2,1.5,0.4);\r\n      \r\n\r\n      scene.add( hill1Mesh, hill2Mesh, hill3Mesh, hill4Mesh,\r\n        ...treeMeshArray, moonMesh );\r\n\r\n      // Enemy AI Setup\r\n      let enemyDirection = 1;\r\n      let enemySpeed = 0.2;\r\n      const enemyGeo = new THREE.BoxGeometry(9,9,9,1,1,1);\r\n      enemyGeo.computeBoundingBox();\r\n      const enemyMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(230,132,34)'\r\n      })\r\n      const enemyMesh = new THREE.Mesh( enemyGeo, enemyMat );\r\n      enemyMesh.position.set(2350, 0, 400);\r\n      let enemyBoundingBox = new THREE.Box3(new Vector3, new Vector3);\r\n      enemyBoundingBox.setFromObject(enemyMesh);\r\n      scene.add( enemyMesh );\r\n\r\n      const enemyMatTween = new Tween(enemyMesh.material.color)\r\n          .to(new THREE.Color('rgb(255,210,200)'), 100)\r\n          .repeat(Infinity)\r\n          .yoyo(true)\r\n          .easing(Easing.Quadratic.InOut)\r\n          .start();\r\n\r\n      const animate = (aniTime: any) => {\r\n\r\n        if(playerMesh.geometry.boundingSphere && !levelLose){\r\n          console.log('bounding box?: ', !!enemyMesh.geometry.boundingBox);\r\n          console.log(enemyBoundingBox.distanceToPoint(playerBoundingSphere.center));\r\n          console.log(!!enemyBoundingBox.intersectsSphere(playerBoundingSphere));\r\n        }\r\n        \r\n        if(!levelLose && !levelWin) {\r\n\r\n          // Collision detection for player and enemy\r\n          if(winLoseLevelDiv && bigHand && littleHand && timerDiv && !levelWin && playerMesh.geometry.boundingSphere &&\r\n            enemyBoundingBox.intersectsSphere(playerBoundingSphere)) {\r\n            levelLose = true;\r\n            console.log('COLLISION');\r\n            bigHand.style.animationPlayState = 'paused';\r\n            littleHand.style.animationPlayState = 'paused';\r\n            timerDiv.classList.add('blink');\r\n            winLoseLevelDiv.classList.add('slowUIEnter');\r\n            winLoseLevelDiv.innerHTML = randomLoseMessage();\r\n          }\r\n\r\n          // Setup timer\r\n          delta = clock.getDelta();\r\n          time -= (speed * delta);\r\n          timeText = `Left: ${Math.floor(time)}`;\r\n          if (timerDiv) {\r\n            timerDiv.innerHTML = timeText;\r\n          };\r\n\r\n          // Removing the instructions UI\r\n          if (time <= 45 && instructionsDiv && !instructionsDiv.classList.contains('exitDom')) {\r\n            instructionsDiv.classList.add('exitDom');\r\n          }\r\n          if (time <= 44 && instructionsDiv) {\r\n            instructionsDiv.remove();\r\n          }\r\n\r\n          // BG movement\r\n          hill1Mesh.position.x -= 0.04;\r\n          hill2Mesh.position.x -= 0.04;\r\n          hill3Mesh.position.x -= 0.04;\r\n          hill4Mesh.position.x -= 0.04;\r\n\r\n          for(let i = 0; i < NUM_OF_TREES; i++) {\r\n            treeMeshArray[i].position.x -= 6;\r\n            if(treeMeshArray[i].position.x <= -2000) {\r\n              treeMeshArray[i].position.x = 2000\r\n            }\r\n          };\r\n\r\n          // Winning trigger logic\r\n          if(winLoseLevelDiv && bigHand && littleHand && Math.floor(time) <= 0) {\r\n            levelWin = true;\r\n            bigHand.style.animationPlayState = 'paused';\r\n            littleHand.style.animationPlayState = 'paused';\r\n            winLoseLevelDiv.classList.add('slowUIEnter');\r\n            winLoseLevelDiv.classList.add('winningAnimation');\r\n            winLoseLevelDiv.innerHTML = randomWinMessage();\r\n          }\r\n        }\r\n\r\n          // Enemy movement \r\n          enemyDirection = Math.sign(playerMesh.position.y);\r\n          enemyMesh.rotateZ(0.05);\r\n          enemyMesh.position.x -= isMobileAspectRatio ? 4.5 : 3;\r\n          enemyMesh.position.y += enemyDirection*enemySpeed;\r\n          if(enemyMesh.position.y === playerMesh.position.y ||\r\n            (enemyDirection >= 0 ? enemyMesh.position.y > playerMesh.position.y :\r\n              enemyMesh.position.y < playerMesh.position.y)) {\r\n            enemyMesh.position.y = playerMesh.position.y;\r\n          }\r\n          if(enemyMesh.position.x <= -250) {\r\n            enemyMesh.position.x  = randomNumberRange(150,750);\r\n          }\r\n          // Have the enemy bounding box follow the enemy's position\r\n          if (enemyMesh.geometry.boundingBox) {\r\n            enemyBoundingBox.copy( enemyMesh.geometry.boundingBox ).applyMatrix4( enemyMesh.matrixWorld );\r\n          }\r\n\r\n          // Enemy material animation\r\n          enemyMatTween.update(aniTime);\r\n\r\n          if (levelLose) {\r\n            playerAcceleration += 0.1;\r\n            playerMesh.position.y -= 0.1+playerAcceleration;\r\n\r\n            // BG movement\r\n            hill1Mesh.position.x -= 0.008;\r\n            hill2Mesh.position.x -= 0.008;\r\n            hill3Mesh.position.x -= 0.008;\r\n            hill4Mesh.position.x -= 0.008;\r\n\r\n            for(let i = 0; i < NUM_OF_TREES; i++) {\r\n              treeMeshArray[i].position.x -= 0.2;\r\n              if(treeMeshArray[i].position.x <= -2000) {\r\n                treeMeshArray[i].position.x = 2000\r\n              }\r\n            };\r\n          } else if (levelWin) {\r\n            playerAcceleration += 0.1;\r\n            playerMesh.position.x += 0.1+playerAcceleration;\r\n\r\n            // BG movement\r\n            hill1Mesh.position.x -= 0.008;\r\n            hill2Mesh.position.x -= 0.008;\r\n            hill3Mesh.position.x -= 0.008;\r\n            hill4Mesh.position.x -= 0.008;\r\n\r\n            for(let i = 0; i < NUM_OF_TREES; i++) {\r\n              treeMeshArray[i].position.x -= 0.2;\r\n              if(treeMeshArray[i].position.x <= -2000) {\r\n                treeMeshArray[i].position.x = 2000\r\n              }\r\n            };\r\n          }\r\n\r\n          requestAnimationFrame(animate);\r\n          render();\t\r\n      };\r\n\r\n      // Render function babyyyyy\r\n      const render = () => {\r\n        if ( postProcessing.enabled ) {\r\n\r\n\t\t\t\t\trenderer.clear();\r\n\r\n\t\t\t\t\t// render scene into texture\r\n\t\t\t\t\trenderer.setRenderTarget( postProcessing.rtTextureColor );\r\n\t\t\t\t\trenderer.clear();\r\n\t\t\t\t\trenderer.render( scene, camera );\r\n\r\n\t\t\t\t\t// render depth into texture\r\n\r\n\t\t\t\t\tscene.overrideMaterial = materialDepth;\r\n\t\t\t\t\trenderer.setRenderTarget( postProcessing.rtTextureDepth );\r\n\t\t\t\t\trenderer.clear();\r\n\t\t\t\t\trenderer.render( scene, camera );\r\n\t\t\t\t\tscene.overrideMaterial = null;\r\n\r\n\t\t\t\t\t// render bokeh composite\r\n\r\n\t\t\t\t\trenderer.setRenderTarget( null );\r\n\t\t\t\t\trenderer.render( postProcessing.scene, postProcessing.camera );\r\n          renderer.render( scene, camera );\r\n        } else {\r\n          scene.overrideMaterial = null;\r\n\t\t\t\t\trenderer.setRenderTarget( null );\r\n          renderer.render( scene, camera );\r\n        }\r\n      };\r\n\r\n      requestAnimationFrame(animate);\r\n};\r\n\r\n\r\n\r\nconst randomNumberRange = (min: number, max: number) => { \r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst initPostprocessing = ( postprocessing: any, shaderSettings: any ): any => {\r\n\r\n  postprocessing.scene = new THREE.Scene();\r\n\r\n  postprocessing.camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, - 10000, 10000 );\r\n  postprocessing.camera.position.z = 100;\r\n\r\n  postprocessing.scene.add( postprocessing.camera );\r\n\r\n  postprocessing.rtTextureDepth = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n  postprocessing.rtTextureColor = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n\r\n  const bokeh_shader = BokehShader;\r\n\r\n  postprocessing.bokeh_uniforms = THREE.UniformsUtils.clone( bokeh_shader.uniforms );\r\n\r\n  postprocessing.bokeh_uniforms[ 'tColor' ].value = postprocessing.rtTextureColor.texture;\r\n  postprocessing.bokeh_uniforms[ 'tDepth' ].value = postprocessing.rtTextureDepth.texture;\r\n  postprocessing.bokeh_uniforms[ 'textureWidth' ].value = window.innerWidth;\r\n  postprocessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight;\r\n  postprocessing.bokeh_uniforms[ 'shaderFocus' ].value = false;\r\n  postprocessing.bokeh_uniforms[ 'fstop' ].value = 2.2;\r\n  //postprocessing.bokeh_uniforms[ 'maxBlur' ].value = 1.1;\r\n  postprocessing.bokeh_uniforms[ 'showFocus' ].value = false;\r\n  postprocessing.bokeh_uniforms[ 'focalDepth' ].value = 2.8;\r\n  postprocessing.bokeh_uniforms[ 'manualdof' ].value = false;\r\n  postprocessing.bokeh_uniforms[ 'vignetting' ].value = false;\r\n  postprocessing.bokeh_uniforms[ 'depthblur' ].value = false;\r\n  postprocessing.bokeh_uniforms[ 'threshold' ].value = 0.5;\r\n  postprocessing.bokeh_uniforms[ 'gain' ].value = 2.0;\r\n  postprocessing.bokeh_uniforms[ 'bias' ].value = 0.5;\r\n  postprocessing.bokeh_uniforms[ 'fringe' ].value = 0.7;\r\n  postprocessing.bokeh_uniforms[ 'focalLength' ].value = 0.7;\r\n  postprocessing.bokeh_uniforms[ 'noise' ].value = true;\r\n  postprocessing.bokeh_uniforms[ 'pentagon' ].value = false;\r\n  postprocessing.bokeh_uniforms[ 'dithering' ].value = 0.0001;\r\n\r\n\r\n  postprocessing.materialBokeh = new THREE.ShaderMaterial( {\r\n    uniforms: postprocessing.bokeh_uniforms,\r\n    vertexShader: bokeh_shader.vertexShader,\r\n    fragmentShader: bokeh_shader.fragmentShader,\r\n    defines: {\r\n      RINGS: shaderSettings.rings,\r\n      SAMPLES: shaderSettings.samples\r\n    }\r\n  } );\r\n\r\n  postprocessing.quad = new THREE.Mesh( new THREE.PlaneGeometry( window.innerWidth, window.innerHeight ), postprocessing.materialBokeh );\r\n  postprocessing.quad.position.z = - 500;\r\n  postprocessing.scene.add( postprocessing.quad );\r\n\r\n  return postprocessing;\r\n};\r\n\r\nconst shaderUpdate = ( postprocessing: any, shaderSettings: any ) => {\r\n  postprocessing.materialBokeh.defines.RINGS = shaderSettings.rings;\r\n  postprocessing.materialBokeh.defines.SAMPLES = shaderSettings.samples;\r\n  postprocessing.materialBokeh.needsUpdate = true;\r\n};\r\n\r\nconst linearize = ( camera: THREE.PerspectiveCamera, depth: number ) => {\r\n  const zfar = camera.far;\r\n  const znear = camera.near;\r\n  return - zfar * znear / ( depth * ( zfar - znear ) - zfar );\r\n};\r\n\r\nconst smoothstep = ( near: number, far: number, depth: number ) => {\r\n  const x = saturate( ( depth - near ) / ( far - near ) );\r\n  return x * x * ( 3 - 2 * x );\r\n};\r\n\r\nconst saturate = ( x: number ) => {\r\n  return Math.max( 0, Math.min( 1, x ) );\r\n};\r\n\r\nconst randomLoseMessage = (): string => {\r\n  const randomNum = Math.floor(randomNumberRange(0,4));\r\n  const loseMessages = [\r\n    'Yikes. I mean you can always refresh to try again.',\r\n    'Uh ooooh. Refresh time?',\r\n    'That\\'s a bummer my guy. Refresh?',\r\n    'Yeah, you better refresh dude. That suckssss'\r\n  ];\r\n  return loseMessages[randomNum];\r\n};\r\n\r\nconst randomWinMessage = (): string => {\r\n  const randomNum = Math.floor(randomNumberRange(0,4));\r\n  const winMessages = [\r\n    'You fucking won dude!\\nRefresh to give it another go.',\r\n    'Wowzers brah!/nI\\'m feeling a refresh comming on.',\r\n    'Ho boi! Dats what\\'s up. Refresh?',\r\n    'Wiener gogeener shliener man!\\nRefresh tiiiime.'\r\n  ];\r\n  return winMessages[randomNum];\r\n};","import React, { ReactElement } from 'react';\r\nimport * as THREE from 'three';\r\nimport { WEBGL } from '../../utils/webGLUtils/webGLUtils';\r\nimport { setupSquareGameLights, squareGameFunctionality } from '../../utils/squareGameUtils/squareGameUtils';\r\nimport './SquareGameContainer.css';\r\n\r\nexport const SquareGameContainer = (): ReactElement => {\r\n\r\n    const [quality, setQuality] = React.useState<number>(1); // 2.5 = low quality | 1 = highest quality\r\n    const [isMobileAspectRatio, setIsMobileAspectRatio] = React.useState(false);\r\n\r\n    const toggleQuality = () => {\r\n        if (quality === 2.5) {\r\n            setQuality(1);\r\n        } else {\r\n            setQuality(2.5);\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if ( WEBGL.isWebGLAvailable() ) {\r\n            \r\n            // Renderer setup\r\n            let renderer = new THREE.WebGLRenderer({ antialias: false, alpha: true }); // needs 'alpha' to be true for CSS gradient background\r\n            renderer.setSize( window.innerWidth, window.innerHeight);\r\n            renderer.setPixelRatio( window.devicePixelRatio/quality );\r\n            renderer.autoClear = false;\r\n            renderer.clear();\r\n\r\n            if(window.innerHeight > window.innerWidth && !isMobileAspectRatio) {\r\n                setIsMobileAspectRatio(true);\r\n            } else if (window.innerHeight <= window.innerWidth && isMobileAspectRatio) {\r\n                setIsMobileAspectRatio(false);\r\n            }\r\n\r\n            renderer.domElement.id = 'dom';\r\n            renderer.domElement.className = 'position-fixed';\r\n            if (document.body.contains( document.getElementById( 'dom' ) ) === false) {\r\n                document.body.append( renderer.domElement );\r\n            } else {\r\n                const dom = document.getElementById('dom');\r\n                if(dom !== null) {\r\n                    document.body.removeChild( dom );\r\n                    document.body.append( renderer.domElement );\r\n                } \r\n            };\r\n\r\n            // Camera / Scene setup\r\n            let scene = new THREE.Scene();\r\n            let camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 3000);\r\n            camera.position.set(0, 0, 450);\r\n            //camera.setFocalLength(35);\r\n\r\n            setupSquareGameLights( scene );\r\n\r\n            squareGameFunctionality( scene, renderer, camera, quality, isMobileAspectRatio );\r\n            \r\n        } else {\r\n            const warning = WEBGL.getWebGLErrorMessage();\r\n            document.body.appendChild( warning );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div data-testid='canvas' id='canvas'>\r\n            <button id='qualityBtn' onClick={toggleQuality}>\r\n                QUALITY\r\n            </button>\r\n            <div id='timerContainer'>\r\n                <div id='timerCircleAni'>\r\n                    <div id='timerBigLineAni'></div>\r\n                    <div id='timerMiddleDot'></div>\r\n                    <div id='timerSmallLineAni'></div>\r\n                </div>\r\n                <div id='timerDiv'></div>\r\n            </div>\r\n            <div id='instructionsContainer'>\r\n                <div id='instructionsText'>Avoid the Squares!</div>\r\n            </div>\r\n            <div id='winLoseText'></div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport './App.css';\nimport { SquareGameContainer } from './components/SquareGameContainer/SquareGameContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SquareGameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}