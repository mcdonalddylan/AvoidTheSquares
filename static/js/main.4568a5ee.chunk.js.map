{"version":3,"sources":["utils/webGLUtils/webGLUtils.js","assets/shaders/BokehShader2.js","utils/squareGameUtils/squareGameUtils.ts","assets/shaders/miscShaders.js","components/SquareGameContainer/SquareGameContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WEBGL","canvas","document","createElement","window","WebGLRenderingContext","getContext","e","WebGL2RenderingContext","this","getErrorMessage","version","contexts","1","2","message","element","id","style","fontFamily","fontSize","fontWeight","textAlign","background","color","padding","width","margin","replace","innerHTML","BokehShader","uniforms","textureWidth","value","textureHeight","focalDepth","focalLength","fstop","tColor","tDepth","maxblur","showFocus","manualdof","vignetting","depthblur","threshold","gain","bias","fringe","znear","zfar","noise","dithering","pentagon","shaderFocus","focusCoords","Vector2","vertexShader","fragmentShader","BokehDepthShader","mNear","mFar","squareGameFunctionality","scene","renderer","camera","quality","isMobileAspectRatio","levelWin","levelLose","materialDepth","postProcessing","enabled","mouse","x","y","depthShader","THREE","near","far","addEventListener","aspect","innerWidth","innerHeight","updateProjectionMatrix","rtTextureDepth","setSize","rtTextureColor","bokeh_uniforms","initPostprocessing","rings","samples","playerAcceleration","playerGeo","playerMat","emissive","specular","shininess","reflectivity","refractionRatio","playerMesh","position","set","add","event","preventDefault","touches","clientX","clientY","vector","unproject","dir","sub","normalize","distance","z","pos","clone","multiplyScalar","copy","bigHand","getElementById","littleHand","clock","delta","time","timeText","concat","toString","timerDiv","instructionsDiv","moonMat","opacity","moonGeo","moonMesh","scale","hillMat","hillGeo","treeMat","treeMeshArray","treeGeo","i","tempTreeMesh","randomNumberRange","Math","random","push","generateTrees","hill1Mesh","hill2Mesh","hill3Mesh","hill4Mesh","apply","Object","toConsumableArray","enemyDirection","enemyGeo","computeBoundingBox","geometry","enemyMat","color1","color2","bboxMin","boundingBox","min","bboxMax","max","enemyMesh","render","clear","setRenderTarget","overrideMaterial","animate","getDelta","floor","console","log","classList","contains","remove","animationPlayState","sign","rotateZ","requestAnimationFrame","postprocessing","shaderSettings","bokeh_shader","texture","materialBokeh","defines","RINGS","SAMPLES","quad","SquareGameContainer","_React$useState","React","useState","_React$useState2","slicedToArray","_React$useState3","_React$useState4","setIsMobileAspectRatio","useEffect","isWebGLAvailable","antialias","setPixelRatio","devicePixelRatio","autoClear","domElement","className","body","append","dom","removeChild","dirLight","rotateX","hemiLight","setupSquareGameLights","warning","getWebGLErrorMessage","appendChild","react_default","a","data-testid","App","SquareGameContainer_SquareGameContainer_SquareGameContainer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4568a5ee.chunk.js","sourcesContent":["// Not my code, came from https://github.com/mrdoob/three.js/blob/master/examples/jsm/WebGL.js\r\n\r\nclass WEBGL {\r\n\r\n\tstatic isWebGLAvailable() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst canvas = document.createElement( 'canvas' );\r\n\t\t\treturn !! ( window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) ) );\r\n\r\n\t\t} catch ( e ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic isWebGL2Available() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst canvas = document.createElement( 'canvas' );\r\n\t\t\treturn !! ( window.WebGL2RenderingContext && canvas.getContext( 'webgl2' ) );\r\n\r\n\t\t} catch ( e ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic getWebGLErrorMessage() {\r\n\r\n\t\treturn this.getErrorMessage( 1 );\r\n\r\n\t}\r\n\r\n\tstatic getWebGL2ErrorMessage() {\r\n\r\n\t\treturn this.getErrorMessage( 2 );\r\n\r\n\t}\r\n\r\n\tstatic getErrorMessage( version ) {\r\n\r\n\t\tconst names = {\r\n\t\t\t1: 'WebGL',\r\n\t\t\t2: 'WebGL 2'\r\n\t\t};\r\n\r\n\t\tconst contexts = {\r\n\t\t\t1: window.WebGLRenderingContext,\r\n\t\t\t2: window.WebGL2RenderingContext\r\n\t\t};\r\n\r\n\t\tlet message = 'Your $0 does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">$1</a>';\r\n\r\n\t\tconst element = document.createElement( 'div' );\r\n\t\telement.id = 'webglmessage';\r\n\t\telement.style.fontFamily = 'monospace';\r\n\t\telement.style.fontSize = '13px';\r\n\t\telement.style.fontWeight = 'normal';\r\n\t\telement.style.textAlign = 'center';\r\n\t\telement.style.background = '#fff';\r\n\t\telement.style.color = '#000';\r\n\t\telement.style.padding = '1.5em';\r\n\t\telement.style.width = '400px';\r\n\t\telement.style.margin = '5em auto 0';\r\n\r\n\t\tif ( contexts[ version ] ) {\r\n\r\n\t\t\tmessage = message.replace( '$0', 'graphics card' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmessage = message.replace( '$0', 'browser' );\r\n\r\n\t\t}\r\n\r\n\t\tmessage = message.replace( '$1', names[ version ] );\r\n\r\n\t\telement.innerHTML = message;\r\n\r\n\t\treturn element;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { WEBGL };","import {\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * Depth-of-field shader with bokeh\r\n * ported from GLSL shader by Martins Upitis\r\n * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\r\n *\r\n * Requires #define RINGS and SAMPLES integers\r\n */\r\nconst BokehShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'textureWidth': { value: 1.0 },\r\n\t\t'textureHeight': { value: 1.0 },\r\n\r\n\t\t'focalDepth': { value: 1.0 },\r\n\t\t'focalLength': { value: 24.0 },\r\n\t\t'fstop': { value: 0.9 },\r\n\r\n\t\t'tColor': { value: null },\r\n\t\t'tDepth': { value: null },\r\n\r\n\t\t'maxblur': { value: 1.0 },\r\n\r\n\t\t'showFocus': { value: 0 },\r\n\t\t'manualdof': { value: 0 },\r\n\t\t'vignetting': { value: 0 },\r\n\t\t'depthblur': { value: 0 },\r\n\r\n\t\t'threshold': { value: 0.5 },\r\n\t\t'gain': { value: 2.0 },\r\n\t\t'bias': { value: 0.5 },\r\n\t\t'fringe': { value: 0.7 },\r\n\r\n\t\t'znear': { value: 0.1 },\r\n\t\t'zfar': { value: 100 },\r\n\r\n\t\t'noise': { value: 1 },\r\n\t\t'dithering': { value: 0.0001 },\r\n\t\t'pentagon': { value: 0 },\r\n\r\n\t\t'shaderFocus': { value: 1 },\r\n\t\t'focusCoords': { value: new Vector2() }\r\n\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\t#include <common>\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tuniform sampler2D tColor;\r\n\t\tuniform sampler2D tDepth;\r\n\t\tuniform float textureWidth;\r\n\t\tuniform float textureHeight;\r\n\r\n\t\tuniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\r\n\t\tuniform float focalLength; //focal length in mm\r\n\t\tuniform float fstop; //f-stop value\r\n\t\tuniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\r\n\r\n\t\t/*\r\n\t\tmake sure that these two values are the same for your camera, otherwise distances will be wrong.\r\n\t\t*/\r\n\r\n\t\tuniform float znear; // camera clipping start\r\n\t\tuniform float zfar; // camera clipping end\r\n\r\n\t\t//------------------------------------------\r\n\t\t//user variables\r\n\r\n\t\tconst int samples = SAMPLES; //samples on the first ring\r\n\t\tconst int rings = RINGS; //ring count\r\n\r\n\t\tconst int maxringsamples = rings * samples;\r\n\r\n\t\tuniform bool manualdof; // manual dof calculation\r\n\t\tfloat ndofstart = 1.0; // near dof blur start\r\n\t\tfloat ndofdist = 2.0; // near dof blur falloff distance\r\n\t\tfloat fdofstart = 1.0; // far dof blur start\r\n\t\tfloat fdofdist = 3.0; // far dof blur falloff distance\r\n\r\n\t\tfloat CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\r\n\r\n\t\tuniform bool vignetting; // use optical lens vignetting\r\n\r\n\t\tfloat vignout = 1.3; // vignetting outer border\r\n\t\tfloat vignin = 0.0; // vignetting inner border\r\n\t\tfloat vignfade = 22.0; // f-stops till vignete fades\r\n\r\n\t\tuniform bool shaderFocus;\r\n\t\t// disable if you use external focalDepth value\r\n\r\n\t\tuniform vec2 focusCoords;\r\n\t\t// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\r\n\t\t// if center of screen use vec2(0.5, 0.5);\r\n\r\n\t\tuniform float maxblur;\r\n\t\t//clamp value of max blur (0.0 = no blur, 1.0 default)\r\n\r\n\t\tuniform float threshold; // highlight threshold;\r\n\t\tuniform float gain; // highlight gain;\r\n\r\n\t\tuniform float bias; // bokeh edge bias\r\n\t\tuniform float fringe; // bokeh chromatic aberration / fringing\r\n\r\n\t\tuniform bool noise; //use noise instead of pattern for sample dithering\r\n\r\n\t\tuniform float dithering;\r\n\r\n\t\tuniform bool depthblur; // blur the depth buffer\r\n\t\tfloat dbsize = 1.25; // depth blur size\r\n\r\n\t\t/*\r\n\t\tnext part is experimental\r\n\t\tnot looking good with small sample and ring count\r\n\t\tlooks okay starting from samples = 4, rings = 4\r\n\t\t*/\r\n\r\n\t\tuniform bool pentagon; //use pentagon as bokeh shape?\r\n\t\tfloat feather = 0.4; //pentagon shape feather\r\n\r\n\t\t//------------------------------------------\r\n\r\n\t\tfloat penta(vec2 coords) {\r\n\t\t\t//pentagonal shape\r\n\t\t\tfloat scale = float(rings) - 1.3;\r\n\t\t\tvec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\r\n\t\t\tvec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\r\n\t\t\tvec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\r\n\t\t\tvec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\r\n\t\t\tvec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\r\n\t\t\tvec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\r\n\r\n\t\t\tvec4  one = vec4( 1.0 );\r\n\r\n\t\t\tvec4 P = vec4((coords),vec2(scale, scale));\r\n\r\n\t\t\tvec4 dist = vec4(0.0);\r\n\t\t\tfloat inorout = -4.0;\r\n\r\n\t\t\tdist.x = dot( P, HS0 );\r\n\t\t\tdist.y = dot( P, HS1 );\r\n\t\t\tdist.z = dot( P, HS2 );\r\n\t\t\tdist.w = dot( P, HS3 );\r\n\r\n\t\t\tdist = smoothstep( -feather, feather, dist );\r\n\r\n\t\t\tinorout += dot( dist, one );\r\n\r\n\t\t\tdist.x = dot( P, HS4 );\r\n\t\t\tdist.y = HS5.w - abs( P.z );\r\n\r\n\t\t\tdist = smoothstep( -feather, feather, dist );\r\n\t\t\tinorout += dist.x;\r\n\r\n\t\t\treturn clamp( inorout, 0.0, 1.0 );\r\n\t\t}\r\n\r\n\t\tfloat bdepth(vec2 coords) {\r\n\t\t\t// Depth buffer blur\r\n\t\t\tfloat d = 0.0;\r\n\t\t\tfloat kernel[9];\r\n\t\t\tvec2 offset[9];\r\n\r\n\t\t\tvec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\r\n\r\n\t\t\toffset[0] = vec2(-wh.x,-wh.y);\r\n\t\t\toffset[1] = vec2( 0.0, -wh.y);\r\n\t\t\toffset[2] = vec2( wh.x -wh.y);\r\n\r\n\t\t\toffset[3] = vec2(-wh.x,  0.0);\r\n\t\t\toffset[4] = vec2( 0.0,   0.0);\r\n\t\t\toffset[5] = vec2( wh.x,  0.0);\r\n\r\n\t\t\toffset[6] = vec2(-wh.x, wh.y);\r\n\t\t\toffset[7] = vec2( 0.0,  wh.y);\r\n\t\t\toffset[8] = vec2( wh.x, wh.y);\r\n\r\n\t\t\tkernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\r\n\t\t\tkernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\r\n\t\t\tkernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\r\n\r\n\r\n\t\t\tfor( int i=0; i<9; i++ ) {\r\n\t\t\t\tfloat tmp = texture2D(tDepth, coords + offset[i]).r;\r\n\t\t\t\td += tmp * kernel[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn d;\r\n\t\t}\r\n\r\n\r\n\t\tvec3 color(vec2 coords,float blur) {\r\n\t\t\t//processing the sample\r\n\r\n\t\t\tvec3 col = vec3(0.0);\r\n\t\t\tvec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\r\n\r\n\t\t\tcol.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\r\n\t\t\tcol.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\r\n\t\t\tcol.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\r\n\r\n\t\t\tvec3 lumcoeff = vec3(0.299,0.587,0.114);\r\n\t\t\tfloat lum = dot(col.rgb, lumcoeff);\r\n\t\t\tfloat thresh = max((lum-threshold)*gain, 0.0);\r\n\t\t\treturn col+mix(vec3(0.0),col,thresh*blur);\r\n\t\t}\r\n\r\n\t\tvec3 debugFocus(vec3 col, float blur, float depth) {\r\n\t\t\tfloat edge = 0.002*depth; //distance based edge smoothing\r\n\t\t\tfloat m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\r\n\t\t\tfloat e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\r\n\r\n\t\t\tcol = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\r\n\t\t\tcol = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\r\n\r\n\t\t\treturn col;\r\n\t\t}\r\n\r\n\t\tfloat linearize(float depth) {\r\n\t\t\treturn -zfar * znear / (depth * (zfar - znear) - zfar);\r\n\t\t}\r\n\r\n\t\tfloat vignette() {\r\n\t\t\tfloat dist = distance(vUv.xy, vec2(0.5,0.5));\r\n\t\t\tdist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\r\n\t\t\treturn clamp(dist,0.0,1.0);\r\n\t\t}\r\n\r\n\t\tfloat gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\r\n\t\t\tfloat rings2 = float(rings);\r\n\t\t\tfloat step = PI*2.0 / float(ringsamples);\r\n\t\t\tfloat pw = cos(j*step)*i;\r\n\t\t\tfloat ph = sin(j*step)*i;\r\n\t\t\tfloat p = 1.0;\r\n\t\t\tif (pentagon) {\r\n\t\t\t\tp = penta(vec2(pw,ph));\r\n\t\t\t}\r\n\t\t\tcol += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\r\n\t\t\treturn 1.0 * mix(1.0, i /rings2, bias) * p;\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\t\t\t//scene depth calculation\r\n\r\n\t\t\tfloat depth = linearize(texture2D(tDepth,vUv.xy).x);\r\n\r\n\t\t\t// Blur depth?\r\n\t\t\tif ( depthblur ) {\r\n\t\t\t\tdepth = linearize(bdepth(vUv.xy));\r\n\t\t\t}\r\n\r\n\t\t\t//focal plane calculation\r\n\r\n\t\t\tfloat fDepth = focalDepth;\r\n\r\n\t\t\tif (shaderFocus) {\r\n\r\n\t\t\t\tfDepth = linearize(texture2D(tDepth,focusCoords).x);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// dof blur factor calculation\r\n\r\n\t\t\tfloat blur = 0.0;\r\n\r\n\t\t\tif (manualdof) {\r\n\t\t\t\tfloat a = depth-fDepth; // Focal plane\r\n\t\t\t\tfloat b = (a-fdofstart)/fdofdist; // Far DoF\r\n\t\t\t\tfloat c = (-a-ndofstart)/ndofdist; // Near Dof\r\n\t\t\t\tblur = (a>0.0) ? b : c;\r\n\t\t\t} else {\r\n\t\t\t\tfloat f = focalLength; // focal length in mm\r\n\t\t\t\tfloat d = fDepth*1000.0; // focal plane in mm\r\n\t\t\t\tfloat o = depth*1000.0; // depth in mm\r\n\r\n\t\t\t\tfloat a = (o*f)/(o-f);\r\n\t\t\t\tfloat b = (d*f)/(d-f);\r\n\t\t\t\tfloat c = (d-f)/(d*fstop*CoC);\r\n\r\n\t\t\t\tblur = abs(a-b)*c;\r\n\t\t\t}\r\n\r\n\t\t\tblur = clamp(blur,0.0,1.0);\r\n\r\n\t\t\t// calculation of pattern for dithering\r\n\r\n\t\t\tvec2 noise = vec2(rand(vUv.xy), rand( vUv.xy + vec2( 0.4, 0.6 ) ) )*dithering*blur;\r\n\r\n\t\t\t// getting blur x and y step factor\r\n\r\n\t\t\tfloat w = (1.0/textureWidth)*blur*maxblur+noise.x;\r\n\t\t\tfloat h = (1.0/textureHeight)*blur*maxblur+noise.y;\r\n\r\n\t\t\t// calculation of final color\r\n\r\n\t\t\tvec3 col = vec3(0.0);\r\n\r\n\t\t\tif(blur < 0.05) {\r\n\t\t\t\t//some optimization thingy\r\n\t\t\t\tcol = texture2D(tColor, vUv.xy).rgb;\r\n\t\t\t} else {\r\n\t\t\t\tcol = texture2D(tColor, vUv.xy).rgb;\r\n\t\t\t\tfloat s = 1.0;\r\n\t\t\t\tint ringsamples;\r\n\r\n\t\t\t\tfor (int i = 1; i <= rings; i++) {\r\n\t\t\t\t\t/*unboxstart*/\r\n\t\t\t\t\tringsamples = i * samples;\r\n\r\n\t\t\t\t\tfor (int j = 0 ; j < maxringsamples ; j++) {\r\n\t\t\t\t\t\tif (j >= ringsamples) break;\r\n\t\t\t\t\t\ts += gather(float(i), float(j), ringsamples, col, w, h, blur);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/*unboxend*/\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcol /= s; //divide by sample count\r\n\t\t\t}\r\n\r\n\t\t\tif (showFocus) {\r\n\t\t\t\tcol = debugFocus(col, blur, depth);\r\n\t\t\t}\r\n\r\n\t\t\tif (vignetting) {\r\n\t\t\t\tcol *= vignette();\r\n\t\t\t}\r\n\r\n\t\t\tgl_FragColor.rgb = col;\r\n\t\t\tgl_FragColor.a = 1.0;\r\n\t\t}`\r\n\r\n};\r\n\r\nconst BokehDepthShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'mNear': { value: 1.0 },\r\n\t\t'mFar': { value: 1000.0 },\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying float vViewZDepth;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#include <begin_vertex>\r\n\t\t\t#include <project_vertex>\r\n\r\n\t\t\tvViewZDepth = - mvPosition.z;\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float mNear;\r\n\t\tuniform float mFar;\r\n\r\n\t\tvarying float vViewZDepth;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\r\n\t\t\tgl_FragColor = vec4( vec3( color ), 1.0 );\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { BokehShader, BokehDepthShader };","import * as THREE from 'three';\r\nimport { BokehShader, BokehDepthShader } from '../../assets/shaders/BokehShader2';\r\nimport { innerGlowShader } from '../../assets/shaders/miscShaders';\r\nimport textFont from '../../assets/fonts/liera-sans-bold.json';\r\nimport { FontLoader } from '../loadingUtils/loadingUtils';\r\nimport { TextGeometry } from '../textRenderingUtils/textRenderingUtils';\r\nimport { PositionalAudio } from 'three';\r\n\r\nexport const setupSquareGameLights = ( scene: THREE.Scene ) => {\r\n    let dirLight = new THREE.DirectionalLight('rgb(255,150,80)', 1);\r\n    dirLight.position.set( 500, 300, -500 );\r\n    dirLight.rotateX(50);\r\n    scene.add( dirLight );\r\n\r\n    // Directional light helper (temp af)\r\n    const helpDirLight = new THREE.DirectionalLightHelper( dirLight );\r\n    //scene.add( helpDirLight );\r\n\r\n    let hemiLight = new THREE.HemisphereLight(0xffffff, 0x232323, 1);\r\n    scene.add( hemiLight );\r\n};\r\n\r\nexport const squareGameFunctionality = (\r\n    scene: THREE.Scene,\r\n    renderer: any,\r\n    camera: THREE.PerspectiveCamera,\r\n    quality: any,\r\n    isMobileAspectRatio: boolean ) => {\r\n\r\n      let levelWin = false;\r\n      let levelLose = false;\r\n\r\n      // Bokeh DOF shader setup\r\n\r\n      let materialDepth: any = {};\r\n      let postProcessing: any = { enabled: true };\r\n      const shaderSettings = { rings: 4, samples: 1 };\r\n\r\n      let mouse = {x: 0, y: 0};\r\n      const raycaster = new THREE.Raycaster();\r\n\r\n      const depthShader = BokehDepthShader;\r\n\r\n      materialDepth = new THREE.ShaderMaterial( {\r\n          uniforms: depthShader.uniforms,\r\n          vertexShader: depthShader.vertexShader,\r\n          fragmentShader: depthShader.fragmentShader\r\n      } );\r\n\r\n      materialDepth.uniforms[ 'mNear' ].value = camera.near;\r\n      materialDepth.uniforms[ 'mFar' ].value = camera.far;\r\n\r\n      // Window Resizing\r\n      window.addEventListener( 'resize', onWindowResize );\r\n      function onWindowResize() {\r\n\r\n\t\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\t\tpostProcessing.rtTextureDepth.setSize( window.innerWidth, window.innerHeight );\r\n\t\t\t\tpostProcessing.rtTextureColor.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\t\t\t\tpostProcessing.bokeh_uniforms[ 'textureWidth' ].value = window.innerWidth;\r\n\t\t\t\tpostProcessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight;\r\n\r\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\t\t\t};\r\n\r\n      // Skybox\r\n\r\n      // TODO: ADD TEXTURED SKYBOX FOR HIGH QUALITY\r\n      // const r = 'textures/cube/Bridge2/';\r\n      // const urls = [ r + 'posx.jpg', r + 'negx.jpg',\r\n      //             r + 'posy.jpg', r + 'negy.jpg',\r\n      //             r + 'posz.jpg', r + 'negz.jpg' ];\r\n      // const textureCube = new THREE.CubeTextureLoader().load( urls );\r\n\r\n      // scene.background = textureCube;\r\n\r\n      // const backgroundCylinderGeo = new THREE.CylinderBufferGeometry( 2, 5, 20, 32, 1, true );\r\n      // const backgroundMaterial = new THREE.ShaderMaterial( backgroundGradientShader );\r\n      // const backgroundMesh = new THREE.Mesh( backgroundCylinderGeo, backgroundMaterial );\r\n      // scene.add( backgroundMesh );\r\n\r\n      scene.background = new THREE.Color('rgb(20,60,100)');\r\n\r\n      postProcessing = initPostprocessing( postProcessing, shaderSettings );\r\n\r\n      // Player sphere creation\r\n      let playerAcceleration = 0;\r\n      const playerGeo = new THREE.SphereGeometry(isMobileAspectRatio ? 4 : 6, 8, 18);\r\n      const playerMat = new THREE.MeshPhongMaterial({\r\n          color: 'rgb(70,180,255)',\r\n          emissive: 'rgb(0,0,0)',\r\n          specular: 'rgb(255,220,0)',\r\n          shininess: 30,\r\n          reflectivity: 1,\r\n          refractionRatio: 0.98\r\n      });\r\n      let playerMesh = new THREE.Mesh( playerGeo, playerMat );\r\n      playerMesh.position.set(0,0,400);\r\n      scene.add( playerMesh );\r\n\r\n      const onMouseMove = ( event: MouseEvent ) => {\r\n          event.preventDefault();\r\n          if(!levelLose && !levelWin) {\r\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n        \r\n            // Make the sphere follow the mouse\r\n            let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n            vector.unproject( camera );\r\n            let dir = vector.sub( camera.position ).normalize();\r\n            let distance = - (camera.position.z - 400) / dir.z;\r\n            let pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n            playerMesh.position.copy(pos);\r\n          }\r\n      };\r\n\r\n      const onTouchMove = ( event: TouchEvent ) => {\r\n        event.preventDefault();\r\n        if(!levelLose && !levelWin) {\r\n          mouse.x = (event.touches[0].clientX / window.innerWidth) * 2 - 1;\r\n          mouse.y = - (event.touches[0].clientY / window.innerHeight) * 2 + 1;\r\n      \r\n          // Make the sphere follow the mouse\r\n          let vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n          vector.unproject( camera );\r\n          let dir = vector.sub( camera.position ).normalize();\r\n          let distance = - (camera.position.z - 400) / dir.z;\r\n          let pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n          playerMesh.position.copy(pos);\r\n        }\r\n    };\r\n\r\n      // When the mouse moves, call the given function\r\n      if (isMobileAspectRatio) {\r\n        document.addEventListener('touchmove', onTouchMove, false);\r\n      } else {\r\n        document.addEventListener('mousemove', onMouseMove, false);\r\n      }\r\n\r\n      // Level setup\r\n      let level = 1;\r\n      const LEVEL_1_TIME = 50;\r\n\r\n      // Timer UI setup\r\n      const bigHand = document.getElementById('timerBigLineAni');\r\n      const littleHand = document.getElementById('timerSmallLineAni');\r\n      let clock = new THREE.Clock();\r\n      let speed = 1;\r\n      let delta = 0;\r\n      let time = LEVEL_1_TIME;\r\n      let timeText: string = `Left: ${LEVEL_1_TIME.toString()}`;\r\n\r\n      const timerDiv = document.getElementById('timerDiv');\r\n      const instructionsDiv = document.getElementById('instructionsContainer');\r\n      \r\n      // BG Objects setup\r\n      const moonMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(175,130,85)',\r\n        emissive: 'rgb(175,130,85)',\r\n        specular: 'rgb(50,50,50)',\r\n        shininess: 0,\r\n        reflectivity: 0,\r\n        refractionRatio: 0\r\n      });\r\n      moonMat.opacity = 0.1;\r\n      const moonGeo = new THREE.SphereBufferGeometry(400,15,15);\r\n      const moonMesh = new THREE.Mesh( moonGeo, moonMat );\r\n      moonMesh.position.set(500, 300, 0);\r\n      moonMesh.scale.z = 0.1;\r\n      const hillMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(20,60,100)',\r\n        emissive: 'rgb(0,0,0)',\r\n        specular: 'rgb(255,230,50)',\r\n        shininess: 2,\r\n        reflectivity: 0.1,\r\n        refractionRatio: 0.1\r\n      });\r\n      const hillGeo = new THREE.SphereBufferGeometry(175,10,10);\r\n      const NUM_OF_TREES = 35;\r\n      const treeMat = new THREE.MeshPhongMaterial({\r\n        color: 'rgb(30,80,150)',\r\n        emissive: 'rgb(0,0,0)',\r\n        specular: 'rgb(200,180,50)',\r\n        shininess: 1,\r\n        reflectivity: 0.1,\r\n        refractionRatio: 0.1\r\n      });\r\n      let treeMeshArray: THREE.Mesh[] = [];\r\n      const treeGeo = new THREE.ConeGeometry(50,150,6,3);\r\n      const generateTrees = (): THREE.Mesh[] => {\r\n        for(let i = 0; i < NUM_OF_TREES; i++) {\r\n          const tempTreeMesh = new THREE.Mesh( treeGeo, treeMat );\r\n          tempTreeMesh.position.set(-2000+(i*randomNumberRange(70,140)),-150+(Math.random()*30),200);\r\n          treeMeshArray.push(tempTreeMesh);\r\n        }\r\n        return treeMeshArray;\r\n      };\r\n      treeMeshArray = generateTrees();\r\n      let hill1Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill1Mesh.position.set(-300,-175,100);\r\n      hill1Mesh.scale.set(1.2,1.5,0.4);\r\n      let hill2Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill2Mesh.position.set(0,-250,100);\r\n      hill2Mesh.scale.set(1.2,1.5,0.4);\r\n      let hill3Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill3Mesh.position.set(600,-175,100);\r\n      hill3Mesh.scale.set(1.2,1.5,0.4);\r\n      let hill4Mesh = new THREE.Mesh( hillGeo, hillMat );\r\n      hill4Mesh.position.set(900,-250,100);\r\n      hill4Mesh.scale.set(1.2,1.5,0.4);\r\n      \r\n\r\n      scene.add( hill1Mesh, hill2Mesh, hill3Mesh, hill4Mesh,\r\n        ...treeMeshArray, moonMesh );\r\n\r\n      // Enemy AI Setup\r\n      let enemyDirection = 1;\r\n      let enemySpeed = 0.2;\r\n      const enemyGeo = new THREE.BoxGeometry(9,9,9,1,1,1);\r\n      enemyGeo.computeBoundingBox();\r\n      const enemyMat = new THREE.ShaderMaterial(innerGlowShader(enemyGeo));\r\n      const enemyMesh = new THREE.Mesh( enemyGeo, enemyMat );\r\n      enemyMesh.position.set(2350, 0, 400);\r\n      scene.add( enemyMesh );\r\n\r\n      const animate = () => {\r\n        if(!levelLose && !levelWin) {\r\n          // Setup timer\r\n          delta = clock.getDelta();\r\n          time -= (speed * delta);\r\n          timeText = `Left: ${Math.floor(time)}`;\r\n          if (timerDiv) {\r\n            timerDiv.innerHTML = timeText;\r\n          };\r\n\r\n          console.log(playerMesh.position.y);\r\n\r\n          // Removing the instructions UI\r\n          if (time <= 45 && instructionsDiv && !instructionsDiv.classList.contains('exitDom')) {\r\n            instructionsDiv.classList.add('exitDom');\r\n          }\r\n          if (time <= 44 && instructionsDiv) {\r\n            instructionsDiv.remove();\r\n          }\r\n\r\n          // BG movement\r\n          hill1Mesh.position.x -= 0.04;\r\n          hill2Mesh.position.x -= 0.04;\r\n          hill3Mesh.position.x -= 0.04;\r\n          hill4Mesh.position.x -= 0.04;\r\n\r\n          for(let i = 0; i < NUM_OF_TREES; i++) {\r\n            treeMeshArray[i].position.x -= 6;\r\n            if(treeMeshArray[i].position.x <= -2000) {\r\n              treeMeshArray[i].position.x = 2000\r\n            }\r\n          };\r\n\r\n          if(bigHand && littleHand && Math.floor(time) <= 0) {\r\n            levelWin = true;\r\n            bigHand.style.animationPlayState = 'paused';\r\n            littleHand.style.animationPlayState = 'paused';\r\n          }\r\n        }\r\n\r\n          // Enemy movement \r\n          enemyDirection = Math.sign(playerMesh.position.y);\r\n          enemyMesh.rotateZ(0.05);\r\n          enemyMesh.position.x -= 3;\r\n          enemyMesh.position.y += enemyDirection*enemySpeed;\r\n          if(enemyMesh.position.y === playerMesh.position.y ||\r\n            (enemyDirection >= 0 ? enemyMesh.position.y > playerMesh.position.y :\r\n              enemyMesh.position.y < playerMesh.position.y)) {\r\n            enemyMesh.position.y = playerMesh.position.y;\r\n          }\r\n          if(enemyMesh.position.x <= -250) {\r\n            enemyMesh.position.x  = randomNumberRange(150,750);\r\n          }\r\n\r\n          // Collision detection for player and enemy\r\n          if(bigHand && littleHand && timerDiv &&\r\n            playerMesh.position.x-3 < enemyMesh.position.x &&\r\n            playerMesh.position.x+3 > enemyMesh.position.x &&\r\n            playerMesh.position.y-3 < enemyMesh.position.y &&\r\n            playerMesh.position.y+3 > enemyMesh.position.y) {\r\n            levelLose = true;\r\n            console.log('COLLISION');\r\n            bigHand.style.animationPlayState = 'paused';\r\n            littleHand.style.animationPlayState = 'paused';\r\n            timerDiv.classList.add('blink');\r\n          }\r\n\r\n          if (levelLose) {\r\n            playerAcceleration += 0.1;\r\n            playerMesh.position.y -= 0.1+playerAcceleration;\r\n\r\n            // BG movement\r\n            hill1Mesh.position.x -= 0.008;\r\n            hill2Mesh.position.x -= 0.008;\r\n            hill3Mesh.position.x -= 0.008;\r\n            hill4Mesh.position.x -= 0.008;\r\n\r\n            for(let i = 0; i < NUM_OF_TREES; i++) {\r\n              treeMeshArray[i].position.x -= 0.2;\r\n              if(treeMeshArray[i].position.x <= -2000) {\r\n                treeMeshArray[i].position.x = 2000\r\n              }\r\n            };\r\n          } else if (levelWin) {\r\n            playerAcceleration += 0.1;\r\n            playerMesh.position.x += 0.1+playerAcceleration;\r\n\r\n            // BG movement\r\n            hill1Mesh.position.x -= 0.008;\r\n            hill2Mesh.position.x -= 0.008;\r\n            hill3Mesh.position.x -= 0.008;\r\n            hill4Mesh.position.x -= 0.008;\r\n\r\n            for(let i = 0; i < NUM_OF_TREES; i++) {\r\n              treeMeshArray[i].position.x -= 0.2;\r\n              if(treeMeshArray[i].position.x <= -2000) {\r\n                treeMeshArray[i].position.x = 2000\r\n              }\r\n            };\r\n          }\r\n\r\n          requestAnimationFrame(animate);\r\n          render();\t\r\n      };\r\n\r\n      // Render function babyyyyy\r\n      const render = () => {\r\n        if ( postProcessing.enabled ) {\r\n\r\n\t\t\t\t\trenderer.clear();\r\n\r\n\t\t\t\t\t// render scene into texture\r\n\t\t\t\t\trenderer.setRenderTarget( postProcessing.rtTextureColor );\r\n\t\t\t\t\trenderer.clear();\r\n\t\t\t\t\trenderer.render( scene, camera );\r\n\r\n\t\t\t\t\t// render depth into texture\r\n\r\n\t\t\t\t\tscene.overrideMaterial = materialDepth;\r\n\t\t\t\t\trenderer.setRenderTarget( postProcessing.rtTextureDepth );\r\n\t\t\t\t\trenderer.clear();\r\n\t\t\t\t\trenderer.render( scene, camera );\r\n\t\t\t\t\tscene.overrideMaterial = null;\r\n\r\n\t\t\t\t\t// render bokeh composite\r\n\r\n\t\t\t\t\trenderer.setRenderTarget( null );\r\n\t\t\t\t\trenderer.render( postProcessing.scene, postProcessing.camera );\r\n          renderer.render( scene, camera );\r\n        } else {\r\n          scene.overrideMaterial = null;\r\n\t\t\t\t\trenderer.setRenderTarget( null );\r\n          renderer.render( scene, camera );\r\n        }\r\n      };\r\n\r\n      animate();\r\n};\r\n\r\n\r\n\r\nconst randomNumberRange = (min: number, max: number) => { \r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst initPostprocessing = ( postprocessing: any, shaderSettings: any ): any => {\r\n\r\n  postprocessing.scene = new THREE.Scene();\r\n\r\n  postprocessing.camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, - 10000, 10000 );\r\n  postprocessing.camera.position.z = 100;\r\n\r\n  postprocessing.scene.add( postprocessing.camera );\r\n\r\n  postprocessing.rtTextureDepth = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n  postprocessing.rtTextureColor = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );\r\n\r\n  const bokeh_shader = BokehShader;\r\n\r\n  postprocessing.bokeh_uniforms = THREE.UniformsUtils.clone( bokeh_shader.uniforms );\r\n\r\n  postprocessing.bokeh_uniforms[ 'tColor' ].value = postprocessing.rtTextureColor.texture;\r\n  postprocessing.bokeh_uniforms[ 'tDepth' ].value = postprocessing.rtTextureDepth.texture;\r\n  postprocessing.bokeh_uniforms[ 'textureWidth' ].value = window.innerWidth;\r\n  postprocessing.bokeh_uniforms[ 'textureHeight' ].value = window.innerHeight;\r\n\r\n  postprocessing.materialBokeh = new THREE.ShaderMaterial( {\r\n\r\n    uniforms: postprocessing.bokeh_uniforms,\r\n    vertexShader: bokeh_shader.vertexShader,\r\n    fragmentShader: bokeh_shader.fragmentShader,\r\n    defines: {\r\n      RINGS: shaderSettings.rings,\r\n      SAMPLES: shaderSettings.samples\r\n    }\r\n\r\n  } );\r\n\r\n  postprocessing.quad = new THREE.Mesh( new THREE.PlaneGeometry( window.innerWidth, window.innerHeight ), postprocessing.materialBokeh );\r\n  postprocessing.quad.position.z = - 500;\r\n  postprocessing.scene.add( postprocessing.quad );\r\n\r\n  return postprocessing;\r\n};\r\n\r\nconst shaderUpdate = ( postprocessing: any, shaderSettings: any ) => {\r\n  postprocessing.materialBokeh.defines.RINGS = shaderSettings.rings;\r\n  postprocessing.materialBokeh.defines.SAMPLES = shaderSettings.samples;\r\n  postprocessing.materialBokeh.needsUpdate = true;\r\n};\r\n\r\nconst linearize = ( camera: THREE.PerspectiveCamera, depth: number ) => {\r\n  const zfar = camera.far;\r\n  const znear = camera.near;\r\n  return - zfar * znear / ( depth * ( zfar - znear ) - zfar );\r\n};\r\n\r\nconst smoothstep = ( near: number, far: number, depth: number ) => {\r\n  const x = saturate( ( depth - near ) / ( far - near ) );\r\n  return x * x * ( 3 - 2 * x );\r\n};\r\n\r\nconst saturate = ( x: number ) => {\r\n  return Math.max( 0, Math.min( 1, x ) );\r\n};","import * as THREE from 'three';\r\n\r\nexport const innerGlowShader = ( geometry ) => {\r\n    return {\r\n    uniforms: {\r\n      color1: {\r\n        value: new THREE.Color('rgb(175,130,85)')\r\n      },\r\n      color2: {\r\n        value: new THREE.Color('rgb(255,240,230)')\r\n      },\r\n      bboxMin: {\r\n        value: geometry.boundingBox ? geometry.boundingBox.min : new THREE.Vector2(0,0)\r\n      },\r\n      bboxMax: {\r\n        value: geometry.boundingBox ? geometry.boundingBox.max : new THREE.Vector2(0,0)\r\n      }\r\n    },\r\n    vertexShader: `\r\n    \r\n      varying vec2 vUv;\r\n  \r\n      void main() {\r\n              vUv = uv;\r\n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n        #define PI 3.1415926\r\n      #define TWO_PI PI*2.\r\n          \r\n      uniform vec3 color1;\r\n      uniform vec3 color2;\r\n    \r\n      varying vec2 vUv;\r\n      \r\n      void main() {\r\n        \r\n        vec2 uv = vUv * 2. - 1.;\r\n        \r\n        float a = atan(uv.x,uv.y)+PI;\r\n        float r = TWO_PI/4.;\r\n        float d = cos(floor(.5+a/r)*r-a)*length(uv);\r\n        \r\n        gl_FragColor = vec4(mix(color1, color2, d-0.5), 1.0);\r\n      }\r\n    `,\r\n    };\r\n  };","import React, { ReactElement } from 'react';\r\nimport * as THREE from 'three';\r\nimport { WEBGL } from '../../utils/webGLUtils/webGLUtils';\r\nimport { setupSquareGameLights, squareGameFunctionality } from '../../utils/squareGameUtils/squareGameUtils';\r\nimport './SquareGameContainer.css';\r\n\r\nexport const SquareGameContainer = (): ReactElement => {\r\n\r\n    const [quality, setQuality] = React.useState<number>(2); // 2.5 = low quality | 1 = highest quality\r\n    const [isMobileAspectRatio, setIsMobileAspectRatio] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if ( WEBGL.isWebGLAvailable() ) {\r\n            \r\n            // Renderer setup\r\n            let renderer = new THREE.WebGLRenderer({ antialias: false });\r\n            renderer.setSize( window.innerWidth, window.innerHeight);\r\n            renderer.setPixelRatio( window.devicePixelRatio/quality );\r\n            renderer.autoClear = false;\r\n\r\n            if(window.innerHeight > window.innerWidth && !isMobileAspectRatio) {\r\n                setIsMobileAspectRatio(true);\r\n            } else if (window.innerHeight <= window.innerWidth && isMobileAspectRatio) {\r\n                setIsMobileAspectRatio(false);\r\n            }\r\n\r\n            renderer.domElement.id = 'dom';\r\n            renderer.domElement.className = 'position-fixed';\r\n            if (document.body.contains( document.getElementById( 'dom' ) ) === false) {\r\n                document.body.append( renderer.domElement );\r\n            } else {\r\n                const dom = document.getElementById('dom');\r\n                if(dom !== null) {\r\n                    document.body.removeChild( dom );\r\n                    document.body.append( renderer.domElement );\r\n                } \r\n            };\r\n\r\n            // Camera / Scene setup\r\n            let scene = new THREE.Scene();\r\n            let camera = new THREE.PerspectiveCamera(70, window.innerWidth/window.innerHeight, 1, 3000);\r\n            camera.position.set(0, 0, 450);\r\n\r\n            setupSquareGameLights( scene );\r\n\r\n            squareGameFunctionality( scene, renderer, camera, quality, isMobileAspectRatio );\r\n            \r\n        } else {\r\n            const warning = WEBGL.getWebGLErrorMessage();\r\n            document.body.appendChild( warning );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div data-testid='canvas' id='canvas'>\r\n            <div id='timerContainer'>\r\n                <div id='timerCircleAni'>\r\n                    <div id='timerBigLineAni'></div>\r\n                    <div id='timerSmallLineAni'></div>\r\n                </div>\r\n                <div id='timerDiv'></div>\r\n            </div>\r\n            <div id='instructionsContainer'>\r\n                <div id='instructionsText'>Avoid the Squares!</div>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\nimport './App.css';\nimport { SquareGameContainer } from './components/SquareGameContainer/SquareGameContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SquareGameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}